plugins {
	id "dev.architectury.loom" version "1.9-SNAPSHOT"
	id "maven-publish"
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

apply from: 'https://files.latvian.dev/public/markdown-git-changelog.gradle'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

def ENV = System.getenv()
version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: '9999'}"
archivesBaseName = "${project.archives_base_name}-forge"
group = project.maven_group

loom {
	silentMojangMappingsLicense()

	runs {
		client {
			if (ENV.MC_CLIENT_ARGS) {
				programArgs ENV.MC_CLIENT_ARGS.split(' ')
			}

			programArg("-mixin.config=create.mixins.json")
			vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
		}
		server {
			if (ENV.MC_SERVER_ARGS) {
				programArgs ENV.MC_SERVER_ARGS.split(' ')
			}

			programArg("-mixin.config=create.mixins.json")
			vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
		}
	}
}

repositories {
	maven {
		url "https://maven.latvian.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
		}
	}

	maven {
		url = "https://maven.createmod.net"
	}

	maven {
		url "https://maven.tterrag.com/"
		content {
			includeGroup "com.tterrag.registrate"
		}
	}

	maven {
		url "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}

	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		name 'JitPack'
		url 'https://jitpack.io'
		content {
			includeGroupByRegex '(io|com)\\.github\\..*'
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.officialMojangMappings()

	forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

	implementation(annotationProcessor("io.github.llamalad7:mixinextras-forge:0.4.1"))
	modApi "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
	modApi("com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_version}:slim") {
		transitive = false // transitive jei and cc tweaked dependencies leaking through üòç
	}
	modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
	modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
	modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
	modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")


	modLocalRuntime modCompileOnly("curse.maven:jei-238222:6075247")
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}

	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	archiveClassifier.set "dev"
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archivesBaseName
			from components.java
		}
	}

	repositories {
		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}

		if (ENV.MAVEN_TOKEN) {
			maven {
				url "https://maven.latvian.dev/releases"
				credentials {
					username = "lat"
					password = "${ENV.MAVEN_TOKEN}"
				}
			}
		}
	}
}


unifiedPublishing {
	project {
		releaseType = "${ENV.RELEASE_TYPE ?: 'release'}"
		gameVersions = [
				rootProject.minecraft_version
		]
		gameLoaders = ["forge"]
		displayName = "$mod_name Forge $project.version"
		changelog = getGitChangelog()
		mainPublication remapJar

		relations {
			depends {
				curseforge = modrinth = "kubejs"
			}
			depends {
				curseforge = modrinth = "create"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
				version = "$project.version+forge"
			}
		}
	}
}
